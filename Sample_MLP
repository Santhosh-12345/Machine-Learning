from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt
import pandas as pd

file_path = r"C:\Users\santhosh\Downloads\Algerian_forest_fires_dataset.csv"
data = pd.read_csv(file_path)

data.columns = data.columns.str.strip()
print('Data before Transformation\n', data)

le = LabelEncoder()
data['Classes'] = le.fit_transform(data['Classes'])

print('Data after Transformation\n', data)

for col in data.columns[:-1]:
    data[col] = pd.to_numeric(data[col], errors='coerce').fillna(0)
print('Data before Scaling\n', data)


inplist = data.columns[:-1]
scale = StandardScaler()
data[inplist] = scale.fit_transform(data[inplist])

print('Data after Scaling\n', data)

x = data.values[:, :-1]
y = data.values[:, -1]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=11)

clf = MLPClassifier(hidden_layer_sizes=(3,), activation='logistic', max_iter=150, solver='adam', 
                    learning_rate='constant', learning_rate_init=0.01, random_state=42)
clf.fit(x_train, y_train)

ypred = clf.predict(x_test)
cm = confusion_matrix(y_test, ypred)

print('Confusion Matrix\n', cm)
print('Classification Report\n', classification_report(y_test, ypred))
print('Coefficients\n', clf.coefs_)
print('Intercepts\n', clf.intercepts_)

plt.plot(clf.loss_curve_)
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('MLP Loss Curve')
plt.show()
